% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{css_list}
\alias{css_list}
\title{Specify CSS rulesets programmatically: ruleset container}
\usage{
css_list(...)
}
\arguments{
\item{...}{A sequence of CSS ruleset statements formed by \code{\link[=css_sel]{css_sel()}} and
\code{\link[=css_dec]{css_dec()}} calls (given as two-sided formulas).}
}
\value{
An object of class \code{css_list}.
}
\description{
A \code{css_list} serves as container for CSS rulesets. You can provide a sequence
of CSS ruleset statements, where each statement uses R formula syntax with a
\code{\link[=css_sel]{css_sel()}} call on the left-hand side (LHS) and a \code{\link[=css_dec]{css_dec()}} call on the
right-hand side (RHS). Adding CSS ruleset statements in this manner allows us
to build up a CSS stylesheet than can be used as the \code{css} value in the
\code{\link[=opt_css]{opt_css()}} function (which is great for adding custom CSS to a \strong{gt} table
rendered as HTML).
}
\section{Figures}{

\if{html}{\figure{man_css_list_1.png}{options: width=100\%}}

\if{html}{\figure{man_css_list_2.png}{options: width=100\%}}
}

\section{Function ID}{

7-19
}

\examples{
# Use `exibble` to create a gt table and
# format the data in both columns; with
# `css_list()` serving as a container for
# CSS, we can generate an additional
# stylesheet using statements that pair
# `css_sel()` with `css_dec()`
tab_1 <-
  exibble \%>\%
  dplyr::select(num, currency) \%>\%
  gt() \%>\%
  fmt_currency(
    columns = vars(currency),
    currency = "HKD"
  ) \%>\%
  fmt_scientific(
    columns = vars(num)
  ) \%>\%
  opt_css(
    css =
      css_list(
        css_sel(".gt_table") ~
          css_dec(background_color = "skyblue"),
        css_sel(".gt_row") ~
          css_dec(padding = "20px 30px"),
        css_sel(".gt_col_heading") ~
          css_dec("text-align!" = "center")
      )
  )

# Define a linear-gradient CSS function as
# a string
linear_gradient <-
  "linear-gradient(to right, rgba(255,0,0,0) 50\%, red)"

# Use `pizzaplace` to create a gt table;
# `opt_css()` can use a `css_list()` that
# should contain statements for creating
# CSS rulesets (the one used here sets
# a background image on the stub cells
# with the `linear_gradient` property value
tab_2 <-
  pizzaplace \%>\%
  dplyr::mutate(month = as.numeric(substr(date, 6, 7))) \%>\%
  dplyr::group_by(month) \%>\%
  dplyr::summarize(pizzas_sold = dplyr::n()) \%>\%
  dplyr::mutate(frac_of_quota = pizzas_sold / 4000) \%>\%
  gt(rowname_col = "month") \%>\%
  opt_css(
    css =
      css_list(
        css_sel(".gt_stub") ~
          css_dec(`background-image` = linear_gradient)
      )
  )

}
\seealso{
Other Helper Functions: 
\code{\link{adjust_luminance}()},
\code{\link{cell_borders}()},
\code{\link{cell_fill}()},
\code{\link{cell_text}()},
\code{\link{cells_body}()},
\code{\link{cells_column_labels}()},
\code{\link{cells_column_spanners}()},
\code{\link{cells_grand_summary}()},
\code{\link{cells_row_groups}()},
\code{\link{cells_stubhead}()},
\code{\link{cells_stub}()},
\code{\link{cells_summary}()},
\code{\link{cells_title}()},
\code{\link{css_dec}()},
\code{\link{css_file}()},
\code{\link{css_sel}()},
\code{\link{currency}()},
\code{\link{default_fonts}()},
\code{\link{escape_latex}()},
\code{\link{google_font}()},
\code{\link{gt_latex_dependencies}()},
\code{\link{html}()},
\code{\link{md}()},
\code{\link{pct}()},
\code{\link{px}()},
\code{\link{random_id}()}
}
\concept{Helper Functions}
