% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{css_dec}
\alias{css_dec}
\title{Specify CSS rulesets programmatically: declarations}
\usage{
css_dec(..., .collapse = "\\n")
}
\arguments{
\item{...}{A sequence of named arguments representing property-value pairs
for CSS rules, or, or complete CSS declaration strings. See \emph{Details} for
advice on forming names and properties.}

\item{.collapse}{Character sequence to use when collapsing declarations.}
}
\value{
An object of class \code{css_dec}.
}
\description{
The \code{css_dec()} function can be used in conjunction with the \code{\link[=css_sel]{css_sel()}}
function to define a CSS ruleset. R formula syntax is used when defining a
CSS ruleset. Using \code{css_dec()} on the right-hand side (RHS) allows us to
define one or more CSS declarations per set of one or more CSS selectors with
\code{\link[=css_sel]{css_sel()}} on the left-hand side (LHS). To form CSS declarations with
\code{css_dec()}, provide named arguments: names serve CSS properties and values
are, appropriately, the values (e.g., \code{css_dec(font_size = px(16))}).
}
\details{
CSS uses a hyphen character within many property names and this doesn't
really work well in R argument names. That's okay though, we can use the
underscore (\verb{_}) or period (\code{.}) characters in place of these ubiquitous
hyphens. Alternatively, we can opt to surround the hyphen-laden argument
names in double quotes or backticks.

To mark a property as \code{!important}, we put an exclamation mark (\code{!})
character at the end of the property name. Here, we are forced to use double
quotes or backticks given the nature of the \code{!} character.

Argument values will be converted to strings. Any property with a value of
\code{NULL} or \code{""} will be dropped.
}
\section{Figures}{

\if{html}{\figure{man_css_dec_1.png}{options: width=100\%}}

\if{html}{\figure{man_css_dec_2.png}{options: width=100\%}}
}

\section{Function ID}{

7-21
}

\examples{
# Use `exibble` to create a gt table;
# replace missing values with the
# `fmt_missing()` function and then
# add styling to the `char` column
# with `cell_fill()` and, also, with
# `css_dec()`
tab_1 <-
  exibble \%>\%
    dplyr::select(char, fctr) \%>\%
    gt() \%>\%
    fmt_missing(everything()) \%>\%
    tab_style(
      style = list(
        cell_fill(color = "lightcyan"),
        css_dec(`font-variant` = "small-caps")
      ),
      locations = cells_body(columns = vars(char))
    )

# Use `exibble` to create a gt table;
# format the data in the two columns
# so that they display 1 decimal value,
# then, add CSS rules with `opt_css()`
# and an assortment of `css_*()` calls
# to modify the look of the table
tab_2 <-
  exibble \%>\%
  dplyr::select(num, currency) \%>\%
  gt() \%>\%
  fmt_number(
    columns = vars(num, currency),
    decimals = 1
  ) \%>\%
  opt_css(
    css =
      css_list(
        css_sel(".gt_table") ~
          css_dec(background_color = "khaki"),
        css_sel(".gt_row") ~
          css_dec(padding.right = "0")
      )
  )

}
\seealso{
The \code{\link[=css_sel]{css_sel()}} and \code{\link[=css_list]{css_list()}} functions for creating complete CSS
rulesets for use with \code{\link[=opt_css]{opt_css()}}.

Other Helper Functions: 
\code{\link{adjust_luminance}()},
\code{\link{cell_borders}()},
\code{\link{cell_fill}()},
\code{\link{cell_text}()},
\code{\link{cells_body}()},
\code{\link{cells_column_labels}()},
\code{\link{cells_column_spanners}()},
\code{\link{cells_grand_summary}()},
\code{\link{cells_row_groups}()},
\code{\link{cells_stubhead}()},
\code{\link{cells_stub}()},
\code{\link{cells_summary}()},
\code{\link{cells_title}()},
\code{\link{css_file}()},
\code{\link{css_list}()},
\code{\link{css_sel}()},
\code{\link{currency}()},
\code{\link{default_fonts}()},
\code{\link{escape_latex}()},
\code{\link{google_font}()},
\code{\link{gt_latex_dependencies}()},
\code{\link{html}()},
\code{\link{md}()},
\code{\link{pct}()},
\code{\link{px}()},
\code{\link{random_id}()}
}
\concept{Helper Functions}
